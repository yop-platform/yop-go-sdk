# YOP Go SDK CI/CD Pipeline
# This workflow builds, tests, and validates the YOP Go SDK across multiple Go versions

name: CI/CD

on:
  push:
    branches: ["main", "develop"]
    tags: ["v*"]
  pull_request:
    branches: ["main", "develop"]

env:
  GO_VERSION_MATRIX: "1.19, 1.20, 1.21, 1.22, 1.23"

jobs:
  # Code quality and formatting checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run go vet
        run: go vet ./yop/...

      - name: Run staticcheck
        run: $(go env GOPATH)/bin/staticcheck ./yop/...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l ./yop/ | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l ./yop/
            exit 1
          fi

      - name: Check go mod tidy
        run: |
          go mod tidy
          if ! git diff --quiet; then
            echo "go mod tidy made changes, please run 'go mod tidy' and commit the changes"
            git diff
            exit 1
          fi

  # Build and test across multiple Go versions
  test:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.19", "1.20", "1.21", "1.22", "1.23"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build -v ./yop/...

      - name: Run tests
        run: go test -v -race -timeout 5m -coverprofile=coverage.out ./yop/...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.23'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage reports
        if: matrix.go-version == '1.23'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.10"

      - name: Gosec Security Checker
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out gosec.sarif ./yop/..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./yop/...

  # Dependency scanning
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.10"

      - name: Check for known vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./yop/...

      - name: Run Nancy (dependency vulnerability scanner)
        run: |
          go list -json -deps ./yop/... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

  # Performance benchmarks
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./yop/... > benchmark.txt
          cat benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

  # Release job (only runs on tags)
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, test, security, dependency-check]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git log
          if [ $(git tag --list | wc -l) -gt 1 ]; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            ## Changes in ${{ steps.tag.outputs.tag }}

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            go get github.com/yop-platform/yop-go-sdk@${{ steps.tag.outputs.tag }}
            ```

            ## Documentation

            - [ä¸­æ–‡æ–‡æ¡£](https://github.com/yop-platform/yop-go-sdk/blob/main/README_zh-CN.md)
            - [English Documentation](https://github.com/yop-platform/yop-go-sdk/blob/main/README.md)
            - [Go Reference](https://pkg.go.dev/github.com/yop-platform/yop-go-sdk@${{ steps.tag.outputs.tag }})
          draft: false
          prerelease: false

  # Notify successful release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "âœ… Successfully released YOP Go SDK ${{ steps.tag.outputs.tag }}"
          echo "ðŸ“¦ Package: https://pkg.go.dev/github.com/yop-platform/yop-go-sdk@${{ steps.tag.outputs.tag }}"
          echo "ðŸ“‹ Release: https://github.com/yop-platform/yop-go-sdk/releases/tag/${{ steps.tag.outputs.tag }}"
